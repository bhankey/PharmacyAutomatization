// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterRequest register request
//
// swagger:model RegisterRequest
type RegisterRequest struct {

	// default pharmacy id
	DefaultPharmacyID int64 `json:"default_pharmacy_id,omitempty"`

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// name
	Name string `json:"name,omitempty"`

	// password
	// Required: true
	// Min Length: 8
	Password *string `json:"password"`

	// role
	// Required: true
	// Enum: [admin apothecary]
	Role *string `json:"role"`

	// surname
	Surname string `json:"surname,omitempty"`
}

// Validate validates this register request
func (m *RegisterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterRequest) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RegisterRequest) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", *m.Password, 8); err != nil {
		return err
	}

	return nil
}

var registerRequestTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","apothecary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		registerRequestTypeRolePropEnum = append(registerRequestTypeRolePropEnum, v)
	}
}

const (

	// RegisterRequestRoleAdmin captures enum value "admin"
	RegisterRequestRoleAdmin string = "admin"

	// RegisterRequestRoleApothecary captures enum value "apothecary"
	RegisterRequestRoleApothecary string = "apothecary"
)

// prop value enum
func (m *RegisterRequest) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, registerRequestTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegisterRequest) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this register request based on context it is used
func (m *RegisterRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RegisterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterRequest) UnmarshalBinary(b []byte) error {
	var res RegisterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
